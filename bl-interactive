#!/bin/bash
#
# Bash library and executable that helps managing interactive choices
#
# Copyright © 2021 b Jean-Jacques Brucker <jjbrucker@free.fr>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License version 3
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

if [[ "$1" == --bash-completion ]] ; then
	BL_tmp_a="$("$BASH_SOURCE" --help | sed -n 's,^   \([a-z_-]\+\>\).*,\1,p' )"
	BL_tmp_o=$(for a in $BL_tmp_a ; do
		echo "[$a]=\"$(eval echo $("$BASH_SOURCE" $a --help | sed -n 's,^  ... \(--[a-z_-]\+[^ ]*\).*,\1,p' | sed 's_<_{_ ; s_|_,_g ; s_>_}_ '))\""
	done)

	eval '_bl_interactive_completion()
	{
		local cur coptions="--help --version"
		local a actions="'$BL_tmp_a'"
		local -A aoptions=('$BL_tmp_o')

		COMPREPLY=()
		cur=${COMP_WORDS[COMP_CWORD]}

		case ${COMP_WORDS[COMP_CWORD-1]} in
			--help|--version)
				# should exit without executing any actions, so do not complete anything
				return 0 ;;
			--preamble)
				return 0 ;;
		esac
		case $cur in
			-*)
				if a=$(grep -o "\<\('$(echo $BL_tmp_a | sed 's, ,\\|,g')'\)\>" <<< "${COMP_WORDS[@]}") ; then
					COMPREPLY=( $(compgen -W "$coptions ${aoptions[$a]}" -- $cur ) )
					return 0
				fi
				COMPREPLY=( $(compgen -W "$coptions" -- $cur ) )
				return 0 ;;
		esac
		# complete actions if none in ${COMP_WORDS[@]}
		grep -q "\<\('$(echo $BL_tmp_a | sed 's, ,\\|,g')'\)\>" <<< "${COMP_WORDS[@]}" || COMPREPLY=( $(compgen -W "$actions" -- $cur ) )
		return 0
	}'
	unset BL_tmp_a BL_tmp_o
	complete -F _bl_interactive_completion "$(basename "$BASH_SOURCE")" "$BASH_SOURCE"
	return 0
fi

# If sourcing while _bl_interactive_parseoptions is already set, execute the function and return without reloading rest of file.
if [[ "$BASH_SOURCE" != "$0" ]] && [[ "$(type -t _bl_interactive_parseoptions)" == function ]] ; then
	_bl_interactive_parseoptions "$@"
	return $?
fi


### Constants ###

declare -r BL_INTERACTIVE_NAME="$(basename $(readlink -f "$BASH_SOURCE") )"
declare -r BL_INTERACTIVE_VERSION="0.0.1"


### functions ###

_bl_interactive_parseoptions() {
	for ((;$#;)) ; do
		case "$1" in
			-h|--help) printf "$BL_INTERACTIVE_usage\n$BL_INTERACTIVE_chelpmsg\n$BL_INTERACTIVE_shelpmsg\n" ; return 2 ;;
			-V|--version) printf "$BL_INTERACTIVE_NAME $BL_INTERACTIVE_VERSION\n" ; return 2 ;;
			--) shift ; break ;;
			-*) printf "$BL_INTERACTIVE_NAME: unrecognized option '$1'\n$BL_INTERACTIVE_usage\nTry '$BASH_SOURCE --help' for more information.\n" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
}


bl_yesno() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] QUESTION"
	local helpmsg="
Helper for a yes/no question (binary choice)
If REPLY == 'yes', return 0
If REPLY == 'no', return 1
Else loop asking the question.

Options:
      --default=<yes|no>   Set a default answer
  -p, --preamble TEXT      Text to display before the question
"
	local def pr question
	for ((;$#;)) ; do
		case "$1" in
			--default=yes) def="yes" ;;
			--default=no) def="no" ;;
			-p|--pre*) shift ; pr="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "$FUNCNAME: Error: unrecognized option '%s'\nTry '$name --help' for more information.\n" "$1" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	question=" $@ (y/n)"
	[[ -z "$def" ]] || question+=" [$def]"

	while true ; do
		echo "$pr" >&2
		read -p " $question ? " rep
		rep=${rep:-$def}
		case "${rep,,}" in
		  y|yes|oui|'sí'|ja|si|'да')
			return 0 ;;
		  n|no|non|nein|'нет')
			return 1 ;;
		  *) echo "  please answer \"yes\" or \"no\"" >&2 ;;
		esac
	done
}


bl_chooseinlist() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] ITEMS..."
	local helpmsg="
Helper for a single choice in a list (like radiobutton)
Display (stderr) numbered list of item and loop asking for a number in this list
Then echo (stdout) selected number (1-n).

Options:
  -p, --preamble     TEXT    Text/Question to display before the list
  -n, --num-per-line NUMBER  Number of items per line (default: 3)
"
	local pr nperline=3 n i ret=0
	for ((;$#;)) ; do
		case "$1" in
			-p|--pre*) shift ; pr="$1" ;;
			-n|--num*) shift ; nperline="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "$FUNCNAME: Error: unrecognized option '%s'\nTry '$name --help' for more information.\n" "$1" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	n=$#
	((n)) || { printf "$FUNCNAME: Error: need items\nTry '$name --help' for more information.\n" >&2 ; return 1 ; }
	printf "$pr" >&2
	for ((i=0;i<n;)) ; do
		if ((i%nperline)) ; then
			printf "\t\t" >&2
		else
			printf "\n\t" >&2
		fi
		printf "$((++i))) $1" >&2
		shift
	done
	echo >&2
	while ((ret<1 || ret>n)) ; do
		read -p "Reply (1-$n) ? " ret
	done
	echo $ret
}


### Help Messages (and set -e if program) ###

if [[ "$BASH_SOURCE" == "$0" ]] ; then
	# run as a program
	set -e
	declare -r BL_INTERACTIVE_isprogram=1

	BL_INTERACTIVE_usage="Usage: $BASH_SOURCE [OPTIONS]... ACTION [ACTION_ARGUMENTS]..."
	BL_INTERACTIVE_shelpmsg="
Actions:
$(for f in $(sed -n 's,^\(bl_[^(]*\)().*, \1,p' "$BASH_SOURCE") ; do printf "   %-19s%s\n" "$(echo ${f:3} | tr '_' '-')" "$($f --help | sed -n '/^$/{n;p;q}')" ; done)

$BL_INTERACTIVE_NAME is also bash library, see:
$ source $BASH_SOURCE --help"
else
	# run as a library (source $0)

	BL_INTERACTIVE_usage="Usage: source $BASH_SOURCE [OPTIONS]..."

	BL_INTERACTIVE_shelpmsg="
      --bash-completion    set completion for $BASH_SOURCE program and return (without loading anything else)

Functions:
$(for f in $(sed -n 's,^\(bl_[^(]*\)().*, \1,p' "$BASH_SOURCE") ; do printf "   %-19s%s\n" "$f" "$($f --help | sed -n '/^$/{n;p;q}')" ; done)

Reminder: when used as a library, all functions calls share the same environment variables, i.e. the same global options."
fi

BL_INTERACTIVE_chelpmsg="
Options:
  -h, --help               show this help and exit (or return)
  -V, --version            show version and exit (or return)"


### Init ###

# Parse Options
_bl_interactive_parseoptions "$@"

# Do nothing else if sourced
[[ "$BASH_SOURCE" == "$0" ]] || return 0


### Run ###

if grep -q "^bl_${1//-/_}()" "$BASH_SOURCE" ; then
	function="bl_${1//-/_}"
	shift
	$function "$@"
	exit $?
else
	printf "$BL_INTERACTIVE_NAME: unrecognized action '$1'\n$BL_INTERACTIVE_usage\nTry '$BASH_SOURCE --help' for more information.\n" >&2
	exit 2
fi

