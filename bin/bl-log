#!/bin/bash
#
# Bash library and executable that wraps 'logger' to write log on stderr or syslog,
# then exit if log level is more serious than BL_LOGEXITLNAME.
#
# Copyright Â© 2021 Jean-Jacques Brucker <jjbrucker@free.fr>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License version 3
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# shellcheck disable=SC2034 # variable appears unused
# shellcheck disable=SC2086 # Double quote warning
# shellcheck disable=SC2128 # expanding array without index warning
# shellcheck disable=SC2207 # Split array warning


if [[ "$1" == --bash-completion ]] ; then
	_bl_log_completion()
	{
		local cur OPTS
		COMPREPLY=()
		cur="${COMP_WORDS[COMP_CWORD]}"
		if grep -q -- "\<\(emerg\|alert\|crit\|err\|error\|warning\|notice\|info\|debug\)\>" <<< "${COMP_WORDS[@]}" ; then
			return 0
		fi
		case ${COMP_WORDS[COMP_CWORD-1]} in
			'-f'|'--file')
				local IFS=$'\n'
				compopt -o filenames
				COMPREPLY=( $(compgen -f -- $cur) )
				return 0 ;;
			'-n'|'--server')
				COMPREPLY=( $(compgen -A hostname -- $cur) )
				return 0 ;;
			'-P'|'--port')
				COMPREPLY=( $(compgen -W "$(awk '$1 ~ /^syslog$/  {split($2, a, "/"); print a[1]}' /etc/services)" -- $cur) )
				return 0 ;;
			'-t'|'--tag')
				COMPREPLY=( $(compgen -W "tag" -- $cur) )
				return 0 ;;
			'-u'|'--socket')
				COMPREPLY=( $(compgen -W "$(awk '$NF ~ /^\// {print $NF}' /proc/net/unix)" -- $cur) )
				return 0 ;;
			'--msgid')
				COMPREPLY=( $(compgen -W "msgid" -- $cur) )
				return 0 ;;
			'-h'|'--help'|'-V'|'--version')
				return 0 ;;
			'--log-exit')
				COMPREPLY=( $(compgen -W "{emerg,alert,crit,err,error,warning,notice,info,debug}" -- $cur) )
				return 0 ;;
		esac
		case $cur in
			'--socket-errors'*|'--color'*)
				COMPREPLY=( $(compgen -W "--{socket-errors,color}={on,off,auto}" -- "$cur" ) )
				return 0 ;;
			'--journald'*)
				local IFS=$'\n'
				compopt -o filenames
				COMPREPLY=( $(compgen -P "--journald=" -f -- "${cur:12}" ) )
				return 0 ;;
			-*)
				OPTS="--file --help --id= --journald --journald= --msgid --no-act --octet-count --port --prio-prefix --rfc3164 --rfc5424= --server --size --skip-empty --socket --socket-errors --socket-errors= --stderr --tag --tcp --udp --version --log-level --log-exit --color --color= --quiet "
				COMPREPLY=( $(compgen -W "${OPTS}" -- $cur) )
				return 0 ;;
		esac
		COMPREPLY=( $(compgen -W "{,auth.,authpriv.,cron.,daemon.,ftp.,lpr.,mail.,news.,syslog.}{emerg,alert,crit,err,error,warning,notice,info,debug}" -- $cur) )
		return 0
	}
	complete -F _bl_log_completion "$(basename "$BASH_SOURCE")" "$BASH_SOURCE"
	return 0
fi

# If sourcing while _bl_log_parseoptions is already set, execute the function and return without reloading rest of file.
if [[ "$BASH_SOURCE" != "$0" ]] && [[ "$(type -t _bl_log_parseoptions)" == function ]] ; then
	_bl_log_parseoptions "$BL_LOG_NAME" "$@"
	return $?
fi

### Constants ###

BL_LOG_NAME="$(basename "$(readlink -f "$BASH_SOURCE")" )"
declare -r BL_LOG_NAME
declare -r BL_LOG_VERSION="0.0.1"

declare -Ar BL_LOGLEVELS=(
[emerg]=0
[alert]=1
[crit]=2
[error]=3 # deprecated synonym for err
[err]=3
[warning]=4
[notice]=5
[info]=6
[debug]=7)

### Default option values ###

BL_LOGCOLORS=(47 45 41 31 35 33 36 37)
BL_LOGLEVEL="${BL_LOGLEVEL:-7}"
BL_LOG_O_STDERR="--stderr"
BL_LOGGER_OPTIONS=""
BL_LOG_COLOR="auto"

if [[ "$BASH_SOURCE" == "$0" ]] ; then
	# run as a program
	set -e
	BL_LOGEXITLNAME="${BL_LOGEXITLNAME:-err}"

	BL_LOG_usage="Usage: $BASH_SOURCE [OPTIONS]... PRIORITY [MESSAGE]..."
	BL_LOG_shelpmsg="
$BL_LOG_NAME is also bash library, see:
$ source $BASH_SOURCE --help"
else
	# run as a library (source $0)
	BL_LOGEXITLNAME="${BL_LOGEXITLNAME:-emerg}"

	BL_LOG_usage="Usage: source $BASH_SOURCE [OPTIONS]..."

	BL_LOG_shelpmsg="
      --bash-completion    set completion for $BASH_SOURCE program and return (without loading anything else)

Reminder: when used as a library, all functions calls share the same environment variables,
i.e. the same options passed when loading the library."
fi


### Help messages ###

BL_LOG_chelpmsg="
Wrapper for logger command, which also print pretty logs on stderr.
PRIORITY is a \"facility.level\" pair. The default facility is [user]=1.
Levels: $(declare -p BL_LOGLEVELS)
If PRIORITY's level is under BL_LOGLEVEL=$BL_LOGLEVEL, don't log anything.
If PRIORITY's level name is more serious than BL_LOGEXITLNAME=$BL_LOGEXITLNAME, exit(8+'PRIORITY's level')
If there is no MESSAGE in command line, read it from stdin.

Options:
  -l, --log-level LEVEL    log level: emerg<1=alert<crit<3=err<warning<5=notice<info<7=debug (current: $BL_LOGLEVEL)
  -L, --log-exit LEVELNAME exit level: emerg|alert|crit|err|warning|... (current: $BL_LOGEXITLNAME )
  -q, --quiet              do not output message to standard error
  -Q, --no-act             do not send message to the logs system (syslog)
      --color[=<on|off|auto>]
                           colorize messages sent to standard error (default: auto)
  -h, --help               show this help and exit/return
  -V, --version            show version and exit/return

Options forwarded to 'logger':
  -i                       log the logger command's PID
      --id[=<id>]          log the given <id>, or otherwise the PID (default \$\$ = logger's PPID)
  -f, --file <file>        log the contents of this file
  -e, --skip-empty         do not log empty lines when processing files
      --octet-count        use rfc6587 octet counting
      --prio-prefix        look for a prefix on every line read from stdin
  -S, --size <size>        maximum size for a single message
  -t, --tag <tag>          mark every line with this tag (default \${0##*/})
  -n, --server <name>      write to this remote syslog server
  -P, --port <port>        use this port for UDP or TCP connection
  -T, --tcp                use TCP only
  -d, --udp                use UDP only
      --rfc3164            use the obsolete BSD syslog protocol
      --rfc5424[=<snip>]   use the syslog protocol (the default for remote);
                             <snip> can be notime, or notq, and/or nohost
      --sd-id <id>         rfc5424 structured data ID
      --sd-param <data>    rfc5424 structured data name=value
      --msgid <msgid>      set rfc5424 message id field
  -u, --socket <socket>    write to this Unix socket
      --socket-errors[=<on|off|auto>]
                           print connection errors when using Unix sockets
      --journald[=<file>]  write journald entry"


### functions ###

#TODO: explain in comment why we dont use getopts...
_bl_log_parseoptions() {
	local name=$1
	[[ "$name" =~ ^- ]] && { echo -e "Usage: $FUNCNAME NAME \"\$@\"\nFor program/function named NAME: parse Options in \$@ and set BL_LOG_ARGV array containing remaining parameters" >&2 ; return 1 ; }
	shift
	for ((;$#;)) ; do
		case "$1" in
			-l|--log-l*) shift ; BL_LOGLEVEL="$1" ; [[ "$BL_LOGLEVEL" == [0-9] ]] || { printf "Error: log-level out of range [0-7]\n" >&2 ; return 2 ; } ;;
			-L|--log-e*) shift ; BL_LOGEXITLNAME="$1"
				grep -q "\<$BL_LOGEXITLNAME\>" <<<"${!BL_LOGLEVELS[@]}" || { printf "Error: log-exit '%s' is none of: %s\n" "$BL_LOGEXITLNAME" "${!BL_LOGLEVELS[*]}" >&2 ; return 2 ; } ;;
			-q|--quiet) BL_LOG_O_STDERR="" ;;
			--color|--color=on) BL_LOG_COLOR=on ;;
			--color=off) BL_LOG_COLOR=off ;;
			--color=auto) BL_LOG_COLOR=auto ;;
			-Q|--no-act) BL_LOGGER_OPTIONS+=("--no-act") ;;
			-i|-e|--skip-empty|--octet-count|--prio-prefix|-T|--tcp|-d|--udp|--rfc3164)
				BL_LOGGER_OPTIONS+=("$1") ;;
			-f|--file|-S|--size|-t|--tag|-n|--server|-P|--port|--sd-id|--sd-param|--msgid|-u|--socket)
				BL_LOGGER_OPTIONS+=("$1")
				shift
				BL_LOGGER_OPTIONS+=("$1") ;;
			--id*|--rfc5424*|--socket-errors*|--journald*)
				BL_LOGGER_OPTIONS+=("$1") ;;
			-h|--help) printf "%s\n%s\n%s\n" "$BL_LOG_usage" "$BL_LOG_chelpmsg" "$BL_LOG_shelpmsg" ; return 2 ;;
			-V|--version) printf "%s %s\n" "$name" "$BL_LOG_VERSION" ; return 2 ;;
			--) shift ; break ;;
			-*) printf "%s: unrecognized option '%s'\n\nTry '%s --help' for more information.\n" "$name" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	BL_LOG_ARGV=("$@")
}


bl_log() {
	local BL_LOG_usage="Usage: $FUNCNAME [OPTIONS]... PRIORITY [MESSAGE]..."

	# -I flag is only available since bash >= 5.1. ...
	#local -I BL_LOGLEVEL BL_LOGEXITLNAME BL_LOG_O_STDERR BL_LOGGER_OPTIONS BL_LOG_COLOR
	# TODO: replace next 2 lines by previous commented line once bash 5.1 is widely used and deployed
	local BL_LOGLEVEL="$BL_LOGLEVEL" BL_LOGEXITLNAME="$BL_LOGEXITLNAME" BL_LOG_COLOR="$BL_LOG_COLOR"
	local BL_LOG_O_STDERR="$BL_LOG_O_STDERR" BL_LOGGER_OPTIONS=("${BL_LOGGER_OPTIONS[@]}")

	local BL_LOG_helpmsg="$BL_LOG_chelpmsg"
	_bl_log_parseoptions "$FUNCNAME" "$@" || return $?
	[[ -n "${BL_LOG_ARGV[*]}" ]] || { echo "Error: Please give at least a priority (${!BL_LOGLEVELS[*]})" >&2 ; return 2 ; }
	set "${BL_LOG_ARGV[@]}"

	local priority=$1 plname=${1##*.} filter
	grep -q "\<$plname\>" <<<"${!BL_LOGLEVELS[@]}" || { echo "Error: priority's level name '$plname' is none of: ${!BL_LOGLEVELS[*]}" >&2 ; return 2 ; }
	shift
	local llevel=${BL_LOGLEVELS[$plname]}
	if ((llevel > BL_LOGLEVEL)) ; then
		# If there is no MESSAGE, purge stdin; else do nothing.
		[[ "$*" ]] || cat >/dev/null
	else
		if [[ "$BL_LOG_COLOR" == on ]] || [[ "$BL_LOG_COLOR" == auto ]] && [[ -t 2 ]] ; then
			filter="2> >(sed 's,: ,: \x1b[${BL_LOGCOLORS[$llevel]}m${plname^}:\x1b[0m ,' >&2)"
		else
			filter="2> >(sed 's,: ,: ${plname^}: ,' >&2)"
		fi
		eval 'logger -p "$priority" $BL_LOG_O_STDERR --id=$$ --tag "${0##*/}" ${BL_LOGGER_OPTIONS[@]} -- "$@" '"$filter"
	fi
	((llevel > BL_LOGLEVELS[$BL_LOGEXITLNAME] )) || exit $((168+llevel))
}


### Init ###

# Parse Options
_bl_log_parseoptions "$BL_LOG_NAME" "$@"

# Do nothing else if sourced
[[ "$BASH_SOURCE" == "$0" ]] || return 0


### Run ###

bl_log "${BL_LOG_ARGV[@]}"
